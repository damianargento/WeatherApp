{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TimeApp","props","search","event","componentDidMount","handleChange","setState","userQuery","target","value","keyPressed","which","state","current","ubicacion","isLoading","this","fetch","then","response","json","data","location","style","marginTop","className","align","borderRadius","src","weather_icons","alt","weather_descriptions","fontSize","color","fontWeight","margin","temperature","name","onKeyPress","onChange","onClick","React","Component","App","class","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAIMA,G,kBACL,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAgBRC,OAAS,SAAAC,GACR,EAAKC,qBAlBc,EAoBpBC,aAAe,SAAAF,GACd,EAAKG,SAAS,CAAEC,UAAWJ,EAAMK,OAAOC,SArBrB,EAuBpBC,WAAa,SAAAP,GACQ,KAAhBA,EAAMQ,QACT,EAAKL,SAAS,CAACC,UAAWJ,EAAMK,OAAOC,QACvC,EAAKP,WAxBL,EAAKU,MAAQ,CACZC,QAAS,GACTC,UAAW,GACXC,WAAU,EACVR,UAAW,gBANM,E,iFAUK,IAAD,OACtBS,KAAKV,SAAS,CAACS,WAAU,IACzBE,MAfU,yFAeED,KAAKJ,MAAML,WACtBW,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKf,SAAS,CAAEO,QAASQ,EAAKR,QAASC,UAAWO,EAAKC,SAAUP,WAAW,S,+BAejF,IACDF,EAAYG,KAAKJ,MAAjBC,QACAC,EAAcE,KAAKJ,MAAnBE,UAER,OADsBE,KAAKJ,MAAnBG,UAEM,4CACd,yBAAKQ,MAAO,CAACC,UAAU,QAASC,UAAU,aAClC,yBAAKA,UAAU,OACb,yBAAKA,UAAU,qBAAqBC,MAAM,SACxC,6BAAK,yBAAKH,MAAO,CAACI,aAAa,QAASC,IAAKf,EAAQgB,cAAeC,IAAKjB,EAAQkB,wBAC1F,yBAAKR,MAAO,CAACS,SAAS,OAAOC,MAAM,UAAWC,WAAW,IAAKC,OAAO,kBAAmBtB,EAAQuB,YAAhG,SACS,yBAAKb,MAAO,CAACS,SAAS,OAAOC,MAAM,UAAWC,WAAW,MAAOpB,EAAUuB,OAE5E,yBAAKZ,UAAU,iCAAiCC,MAAM,QACpD,2BAAOjB,MAAOO,KAAKJ,MAAML,UAAWkB,UAAU,sBAAsBa,WAAYtB,KAAKN,WAAY6B,SAAUvB,KAAKX,eAChH,4BAAQoB,UAAU,kBAAkBe,QAASxB,KAAKd,QAAlD,iB,GA7CQuC,IAAMC,YAiEbC,EAZH,kBACZ,yBAAKlB,UAAU,aACb,yBAAKA,UAAU,OAAM,yBAAKmB,MAAM,aAC9B,yBAAKnB,UAAU,sBACb,6BAASA,UAAU,OACjB,kBAAC,EAAD,QAGJ,yBAAKmB,MAAM,gBCrDKC,QACW,cAA7BC,OAAOxB,SAASyB,UAEe,UAA7BD,OAAOxB,SAASyB,UAEhBD,OAAOxB,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,iB","file":"static/js/main.5c0f2eef.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nconst API = \"http://api.weatherstack.com/current?access_key=e85eaaed9d20b339b2db9017665a8ff9&query=\"\n\nclass TimeApp extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrent: {},\n\t\t\tubicacion: {},\n\t\t\tisLoading:false,\n\t\t\tuserQuery: \"Buenos Aires\"\n\t\t\t}\n\t\t}\n\n    componentDidMount() {\n\t\tthis.setState({isLoading:true})\n\t\tfetch(API + this.state.userQuery)\n\t\t.then(response => response.json())\n\t\t.then(data => this.setState({ current: data.current, ubicacion: data.location, isLoading: false, }))\n\t}\n\nsearch = event => {\n\tthis.componentDidMount();\n}\nhandleChange = event => {\n\tthis.setState({ userQuery: event.target.value });\n  };\nkeyPressed = event => {\n\tif (event.which === 13) {\n\t\tthis.setState({userQuery: event.target.value});\n\t\tthis.search()\n\t}\n}\n\trender() {\n\t\tconst { current } = this.state;\n\t\tconst { ubicacion } = this.state;\n\t\tconst { isLoading } = this.state;\n\t\treturn (\n\t\t\t\tisLoading ? <div>Cargando...</div> : \n\t\t<div style={{marginTop:'35px'}} className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-6 col-xs-12\" align=\"right\">\n              <div><img style={{borderRadius:'15px'}} src={current.weather_icons} alt={current.weather_descriptions}/></div>\n\t\t\t  <div style={{fontSize:'30px',color:'#048587', fontWeight:700, margin:'5px 0 -10px 0'}}>{current.temperature}Â°C</div>\n              <div style={{fontSize:'13px',color:'#470000', fontWeight:200}}>{ubicacion.name}</div>\n             </div>\n            <div className=\"col-md-6 col-xs-12 form-fields\" align=\"left\">\n              <input value={this.state.userQuery} className=\"form-control search\" onKeyPress={this.keyPressed} onChange={this.handleChange}></input>\n              <button className=\"btn btn-success\" onClick={this.search}>Search</button>\n            </div>\n          </div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\t\n\t}\nconst App = () => (\n<div className=\"container\">\n  <div className=\"row\"><div class=\"col-md-3\"></div>\n    <div className=\"col-md-6 col-xs-12\">\n      <section className=\"App\">\n        <TimeApp/>\n      </section>\n    </div>\n    <div class=\"col-md-3\"></div>\n  </div>\n</div>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}